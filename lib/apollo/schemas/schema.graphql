# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
    id: ID!
}

type Battle implements Node {
    caller: User
    endDate: DateTime!
    id: ID!
    receiver: User
    results: [Result]
    status: BattleStatus!
    task: Task
}

"A connection to a list of items."
type BattleConnection {
    "A list of edges."
    edges: [BattleEdge!]
    "A flattened list of the nodes."
    nodes: [Battle]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type BattleEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Battle
}

type Mutation {
    callBattle(opponentId: ID!, userId: ID!): PayloadBaseOfBattle
    checkAnswers(battleId: ID!, questionsAnswers: [KeyValuePairOfGuidAndStringInput!], userId: ID!): PayloadBaseOfBattle
    generateUser: PayloadBaseOfUser
    startBattle(battleId: ID!, userId: ID!): PayloadBaseOfBattle
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "Indicates whether more edges exist following the set defined by the clients arguments."
    hasNextPage: Boolean!
    "Indicates whether more edges exist prior the set defined by the clients arguments."
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type PayloadBaseOfBattle {
    errors: [UserError!]
    value: Battle
}

type PayloadBaseOfUser {
    errors: [UserError!]
    value: User
}

type Query {
    allUsers(after: String, before: String, first: Int, last: Int, userId: ID!): UserConnection
    battles(affiliation: Affiliation, after: String, battleStatus: BattleStatus, before: String, first: Int, last: Int, userId: ID!): BattleConnection
    node(id: ID!): Node
    rating(after: String, before: String, first: Int, last: Int, league: League!): UserConnection
    user(userId: ID!): PayloadBaseOfUser
}

type Question {
    answer: String
    description: String
    id: Uuid!
}

type Result {
    battleId: Uuid!
    id: Uuid!
    questionId: Uuid!
    res: Boolean!
    userId: Uuid!
}

type Task {
    questions: [Question]
    taskId: Uuid!
}

type User implements Node {
    balance: Int!
    battles: [Battle]
    energe: Int!
    experience: Int!
    id: ID!
    league: League!
    username: String
}

"A connection to a list of items."
type UserConnection {
    "A list of edges."
    edges: [UserEdge!]
    "A flattened list of the nodes."
    nodes: [User]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type UserEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: User
}

type UserError {
    code: String
    message: String
}

enum Affiliation {
    FROM_ME
    TO_ME
}

enum BattleStatus {
    CALLER_PROCESSING
    COMPLETED
    CREATED
    RECEIVER_PROCESSING
    RECEIVING_AWAITING
}

enum League {
    CPU
    QUANTUM
    TRANSISTOR
}

input KeyValuePairOfGuidAndStringInput {
    key: Uuid!
    value: String!
}


"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

scalar Uuid